@function _position-flipper($pos) {
    @return if($pos == left, right, null)
    if($pos == right, left, null)
    if($pos == top, bottom, null)
    if($pos == bottom, top, null);
}

/// Checks if a list contains a value(s).
///
/// @access private
///
/// @param {List} $list
///   The list to check against.
///
/// @param {List} $values
///   A single value or list of values to check for.
///
/// @example scss - Usage
///   contains($list, $value)
///
/// @return {Bool}
@function contains($list, $values...) {
    @each $value in $values {
        @if type-of(index($list, $value)) != "number" {
            @return false;
        }
    }

    @return true;
}

/// Checks for a valid number.
///
/// @param {Number} $value
///
/// @require {function} contains
@function is-number($value) {
    @return contains("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" 0 1 2 3 4 5 6 7 8 9, $value);
}

//************************************************************************//
// Helper function for str-to-num fn.
// Source: http://sassmeister.com/gist/9647408
//************************************************************************//
@function _convert-units($number, $unit) {
    $strings: "px", "cm", "mm", "%", "ch", "pica", "in", "em", "rem", "pt", "pc", "ex", "vw", "vh", "vmin", "vmax", "deg", "rad", "grad", "turn";
    $units:   1px, 1cm, 1mm, 1%, 1ch, 1pica, 1in, 1em, 1rem, 1pt, 1pc, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1deg, 1rad, 1grad, 1turn;
    $index: index($strings, $unit);

    @if not $index {
        @warn "Unknown unit `#{$unit}`.";
        @return false;
    }

    @if type-of($number) != "number" {
        @warn "`#{$number} is not a number`";
        @return false;
    }

    @return $number * nth($units, $index);
}

//************************************************************************//
// Helper function for linear/radial-gradient-parsers.
// Source: http://sassmeister.com/gist/9647408
//************************************************************************//
@function _str-to-num($string) {
    // Matrices
    $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
    $numbers:  0   1   2   3   4   5   6   7   8   9;

    // Result
    $result: 0;
    $divider: 0;
    $minus: false;

    // Looping through all characters
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);

        @if $character == "-" {
            $minus: true;
        }

        @else if $character == "." {
            $divider: 1;
        }

        @else {
            @if not $index {
                $result: if($minus, $result * -1, $result);
                @return _convert-units($result, str-slice($string, $i));
            }

            $number: nth($numbers, $index);

            @if $divider == 0 {
                $result: $result * 10;
            }

            @else {
                // Move the decimal dot to the left
                $divider: $divider * 10;
                $number: $number / $divider;
            }

            $result: $result + $number;
        }
    }
    @return if($minus, $result * -1, $result);
}

// Private function for linear-gradient-parser
@function _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals) {
    $val-1: str-slice($first-val, 1, $has-multiple-vals - 1);
    $val-2: str-slice($first-val, $has-multiple-vals + 1, str-length($first-val));
    $val-3: null;
    $has-val-3: str-index($val-2, " ");

    @if $has-val-3 {
        $val-3: str-slice($val-2, $has-val-3 + 1, str-length($val-2));
        $val-2: str-slice($val-2, 1, $has-val-3 - 1);
    }

    $pos: _position-flipper($val-1) _position-flipper($val-2) _position-flipper($val-3);
    $pos: unquote($pos + "");

    // Use old spec for webkit
    @if $val-1 == "to" {
        @return (
            webkit-image: -webkit- + $prefix + $pos + $suffix,
            spec-image: $image
        );
    }

    // Bring the code up to spec
    @else {
        @return (
            webkit-image: -webkit- + $image,
            spec-image: $prefix + "to " + $pos + $suffix
        );
    }
}

// Private function for linear-gradient-parser
@function _linear-angle-parser($image, $first-val, $prefix, $suffix) {
    $offset: null;
    $unit-short:  str-slice($first-val, str-length($first-val) - 2, str-length($first-val));
    $unit-long:   str-slice($first-val, str-length($first-val) - 3, str-length($first-val));

    @if ($unit-long == "grad") or
      ($unit-long == "turn") {
        $offset: if($unit-long == "grad", -100grad * 3, -0.75turn);
    }

    @else if ($unit-short == "deg") or
           ($unit-short == "rad") {
        $offset: if($unit-short == "deg", -90 * 3, 1.6rad);
    }

    @if $offset {
        $num: _str-to-num($first-val);

        @return (
            webkit-image: -webkit- + $prefix + ($offset - $num) + $suffix,
            spec-image: $image
        );
    }
}

@function _linear-gradient-parser($image) {
    $image: unquote($image);
    $gradients: ();
    $start: str-index($image, "(");
    $end: str-index($image, ",");
    $first-val: str-slice($image, $start + 1, $end - 1);

    $prefix: str-slice($image, 1, $start);
    $suffix: str-slice($image, $end, str-length($image));

    $has-multiple-vals: str-index($first-val, " ");
    $has-single-position: unquote(_position-flipper($first-val) + "");
    $has-angle: is-number(str-slice($first-val, 1, 1));

    @if $has-multiple-vals {
        $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);
    }

    @else if $has-single-position != "" {
        $pos: unquote($has-single-position + "");

        $gradients: (
            webkit-image: -webkit- + $image,
            spec-image: $prefix + "to " + $pos + $suffix
        );
    }

    @else if $has-angle {
        // Rotate degree for webkit
        $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);
    }

    @else {
        $gradients: (
            webkit-image: -webkit- + $image,
            spec-image: $image
        );
    }

    @return $gradients;
}

@function _radial-gradient-parser($image) {
    $image: unquote($image);
    $gradients: ();
    $start: str-index($image, "(");
    $end: str-index($image, ",");
    $first-val: str-slice($image, $start + 1, $end - 1);

    $prefix: str-slice($image, 1, $start);
    $suffix: str-slice($image, $end, str-length($image));

    $is-spec-syntax: str-index($first-val, "at");

    @if $is-spec-syntax and $is-spec-syntax > 1 {
        $keyword: str-slice($first-val, 1, $is-spec-syntax - 2);
        $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));
        $pos: append($pos, $keyword, comma);

        $gradients: (
            webkit-image: -webkit- + $prefix + $pos + $suffix,
            spec-image: $image
        );
    }

    @else if $is-spec-syntax == 1 {
        $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));

        $gradients: (
            webkit-image: -webkit- + $prefix + $pos + $suffix,
            spec-image: $image
        );
    }

    @else if str-index($image, "cover") or str-index($image, "contain") {
        @warn "Radial-gradient needs to be updated to conform to latest spec.";

        $gradients: (
            webkit-image: null,
            spec-image: $image
        );
    }

    @else {
        $gradients: (
            webkit-image: -webkit- + $image,
            spec-image: $image
        );
    }

    @return $gradients;
}

@function _linear-positions-parser($pos) {
    $type: type-of(nth($pos, 1));
    $spec: null;
    $degree: null;
    $side: null;
    $corner: null;
    $length: length($pos);
    // Parse Side and corner positions
    @if ($length > 1) {
        @if nth($pos, 1) == "to" { // Newer syntax
            $side: nth($pos, 2);

            @if $length == 2 { // eg. to top
                // Swap for backwards compatibility
                $degree: _position-flipper(nth($pos, 2));
            }
            @else if $length == 3 { // eg. to top left
                $corner: nth($pos, 3);
            }
        }
        @else if $length == 2 { // Older syntax ("top left")
            $side: _position-flipper(nth($pos, 1));
            $corner: _position-flipper(nth($pos, 2));
        }

        @if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        $spec: to $side $corner;
    }
    @else if $length == 1 {
        // Swap for backwards compatibility
        @if $type == string {
            $degree: $pos;
            $spec: to _position-flipper($pos);
        }
        @else {
            $degree: -270 - $pos; //rotate the gradient opposite from spec
            $spec: $pos;
        }
    }
    $degree: unquote($degree + ",");
    $spec:   unquote($spec + ",");
    @return $degree $spec;
}
